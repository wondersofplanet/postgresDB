import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class OracleToCSV {

    // Connection parameters
    private static final String HOST = "localhost"; // Replace with your host
    private static final String PORT = "1521";      // Replace with your port number
    private static final String SERVICE_NAME = "your_service_name"; // Replace with your service name
    private static final String USER = "your_username";  // Replace with your username
    private static final String PASS = "your_password";  // Replace with your password

    // Hardcoded table names
    private static final String[] TABLES = {"products", "customers", "orders"}; // Replace with your table names

    public static void main(String[] args) {
        Connection connection = null;
        Statement statementForData = null;
        Statement statementForCount = null;

        // List to hold table names, row counts, column counts, BLOB counts, and CLOB counts
        List<String[]> tableRowCounts = new ArrayList<>();

        try {
            // Load the Oracle JDBC Driver
            Class.forName("oracle.jdbc.driver.OracleDriver");

            // Build the Oracle connection URL dynamically, including service name
            String dbUrl = "jdbc:oracle:thin:@" + HOST + ":" + PORT + "/" + SERVICE_NAME;

            // Open connection to the Oracle database
            connection = DriverManager.getConnection(dbUrl, USER, PASS);

            // Loop through each table name
            for (String table : TABLES) {
                System.out.println("Downloading data from table: " + table);

                // Create separate statements for the data query and the row count query
                statementForData = connection.createStatement();
                statementForCount = connection.createStatement();

                // Query to count the number of rows in the table
                String countQuery = "SELECT COUNT(*) FROM " + table;
                ResultSet countResultSet = statementForCount.executeQuery(countQuery);
                int rowCount = 0;

                if (countResultSet.next()) {
                    rowCount = countResultSet.getInt(1); // Get the row count
                }
                countResultSet.close();  // Explicitly close the count ResultSet

                // Query to get all rows from the table
                String dataQuery = "SELECT * FROM " + table;
                ResultSet dataResultSet = statementForData.executeQuery(dataQuery);

                // Get the column count
                int columnCount = dataResultSet.getMetaData().getColumnCount();

                // Get BLOB and CLOB counts
                int blobCount = 0;
                int clobCount = 0;

                // Count BLOB and CLOB columns
                for (int i = 1; i <= columnCount; i++) {
                    String columnType = dataResultSet.getMetaData().getColumnTypeName(i);
                    if ("BLOB".equalsIgnoreCase(columnType)) {
                        blobCount++;
                    } else if ("CLOB".equalsIgnoreCase(columnType)) {
                        clobCount++;
                    }
                }

                // Add the table name, row count, column count, blob count, and clob count to the list for the summary CSV
                tableRowCounts.add(new String[]{table, String.valueOf(rowCount), String.valueOf(columnCount), String.valueOf(blobCount), String.valueOf(clobCount)});

                // Generate the CSV file name based on the table name and row count
                String fileName = table + "_countofrows_" + rowCount + ".csv";

                // Get table data and write to CSV
                writeToCSV(dataResultSet, fileName);

                // Close the data ResultSet
                dataResultSet.close();

                System.out.println("Data saved to " + fileName);
            }

            // After processing all tables, create a summary CSV with table names, row counts, column counts, BLOB counts, and CLOB counts
            String summaryFileName = "table_row_column_counts.csv";
            writeSummaryCSV(tableRowCounts, summaryFileName);
            System.out.println("Summary of table row and column counts saved to " + summaryFileName);
            
            // Create a sorted summary CSV by row count
            String sortedSummaryFileName = "table_row_column_counts_sortedByrowcount.csv";
            writeSortedSummaryCSV(tableRowCounts, sortedSummaryFileName);
            System.out.println("Sorted summary of table row and column counts saved to " + sortedSummaryFileName);

            // Open the folder where the CSV files are located
            java.awt.Desktop.getDesktop().open(new File("."));

        } catch (SQLException | ClassNotFoundException | IOException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (statementForData != null) statementForData.close();
                if (statementForCount != null) statementForCount.close();
                if (connection != null) connection.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }

    // Write the ResultSet data to a CSV file
    private static void writeToCSV(ResultSet resultSet, String fileName) throws SQLException {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            int columnCount = resultSet.getMetaData().getColumnCount();

            // Write the column headers
            for (int i = 1; i <= columnCount; i++) {
                fileWriter.append(resultSet.getMetaData().getColumnName(i));
                if (i < columnCount) {
                    fileWriter.append(",");
                }
            }
            fileWriter.append("\n");

            // Write the rows
            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    fileWriter.append(resultSet.getString(i));
                    if (i < columnCount) {
                        fileWriter.append(",");
                    }
                }
                fileWriter.append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Write the summary CSV file with table names, row counts, column counts, BLOB counts, and CLOB counts
    private static void writeSummaryCSV(List<String[]> tableRowCounts, String fileName) {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            // Write the header
            fileWriter.append("Table,RowCount,ColumnCount,BLOBCount,CLOBCount\n");

            // Write each table's name, row count, and column count
            for (String[] row : tableRowCounts) {
                fileWriter.append(row[0]).append(",").append(row[1]).append(",").append(row[2]).append(",").append(row[3]).append(",").append(row[4]).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Write a sorted summary CSV file by row count
    private static void writeSortedSummaryCSV(List<String[]> tableRowCounts, String fileName) {
        // Sort the list based on row count (index 1)
        tableRowCounts.sort(Comparator.comparingInt(row -> Integer.parseInt(row[1])));

        try (FileWriter fileWriter = new FileWriter(fileName)) {
            // Write the header
            fileWriter.append("Table,RowCount,ColumnCount,BLOBCount,CLOBCount\n");

            // Write each table's name, row count, and column count
            for (String[] row : tableRowCounts) {
                fileWriter.append(row[0]).append(",").append(row[1]).append(",").append(row[2]).append(",").append(row[3]).append(",").append(row[4]).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
